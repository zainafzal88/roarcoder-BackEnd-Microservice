AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: > 
  Sample SAM Template for expertise-Layer

Globals:
  Function:
    Timeout: 3

Resources:
  GetExpertiseFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: getexpertise.lambdaHandler
      Runtime: nodejs10.x
      Policies:
        - AmazonDynamoDBReadOnlyAccess
      Environment:
        Variables:
          TABLE: !Ref ExpertiseTable
      Events:
        GetExpertiseApi:
          Type: Api 
          Properties:
            Path: /getexpertise/{proxy+}
            Method: get
  InsertExpertiseFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: insertexpertise.lambdaHandler
      Runtime: nodejs10.x
      Environment:
        Variables:
          TABLE: !Ref ExpertiseTable
      Role: !GetAtt
        - InsertExpertiseFunctionIamRole
        - Arn
  InsertExpertiseFunctionIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        - 
          PolicyName: 'AmazonDynamoDBWriteOnlyAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:PutItem'
                Resource: !Join
                  - '/'
                  - - !GetAtt
                      - ExpertiseTable
                      - Arn
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
  ExpertiseTable: # dynamo db table
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: expertise
      AttributeDefinitions:
        - AttributeName: UUID
          AttributeType: S
      KeySchema:
        - AttributeName: UUID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetExpertiseApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Expertise function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getexpertise/"
  HelloWorldFunction:
    Description: "GetExpertise Lambda Function ARN"
    Value: !GetAtt GetExpertiseFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for GetExpertise function"
    Value: !GetAtt GetExpertiseFunction.Arn
